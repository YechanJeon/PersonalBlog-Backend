const express = require('express')
const app = express();
const {markdown} = require('markdown')
const mongoose = require('mongoose')

mongoose.connect("mongodb://localhost:27017")

let db = mongoose.connection

db.on('err' , () => console.log('err'))
db.once('open' , () => console.log('db connect'))

let postSchema = new mongoose.Schema({
    title : '',
    writer : '',
    date : '',
    post : '',
    id : '',
})

let postModel = mongoose.model('post' , postSchema)
app.use(express.json());

app.get('/' , (req,res) => {
    res.json({
        ok : 1
    })
})

app.post('/writePost' , async (req,res) => { 
    let posts = await postModel.find()
    let newPost =  new postModel
    if(req.body.title === ''&&req.body.writer === ''&&req.body.post === ''){
        res.status(400).json({
            ok : 0,
            msg : '빈값이 존재합니다.'
        })
    }else{
        newPost.title = req.body.title
        newPost.writer = req.body.writer
        newPost.date = new Date()
        newPost.post = req.body.post
        if(posts.length > 0){
            newPost.id = posts[posts.length-1].id + 1
        }else{
            newPost.id = 1
        }
        newPost.save(err => {
            if(err){
                res.status(400).json({
                    ok : 0 , 
                    msg : err
                })
            }else{
                res.json({
                    ok : 1
                })
            }
        })

    }
})

app.get('/posts', async (req ,res) => {
    // res.send(posts.length)
    res.json(await postModel.find())

})

/* 
글 제목
날짜
작성자
글 내용
글 아이디
*/

app.get('/readPost/:id', async (req ,res) => {
    res.json(await postModel.findOne({id : +req.params.id}))
})

app.get('/mainPostLists' , async (req,res) => {
    let posts = await postModel.find()
    posts = posts.reverse()
    posts.length = 6
    res.send(posts)//게시글 목록 뒤에서 부터
    
}) //메인화면에 6개 출력

app.get('/postLists', async (req,res) => {

})

app.put('/updatePost/getPost/:id' , async (req , res) => {
    let post = await postModel.findOne({id : +req.params.id})
    res.json({
        ok : 1,
        title : post.title,
        post: post.post,
    })
})

app.put('/updatePost/changePost/:id' , async (req , res) => {
    postModel.updateOne({id : +req.params.id} , {})
})

app.delete('/deletePost/:id' , async (req,res) => {
    if(await postModel.deleteMany({id:+req.params.id})){
        res.json({
            ok : 1
        })
    }
})

app.listen('3000', () => {
    console.log('Server on')
})